{
	"info": {
		"_postman_id": "0680116a-f40d-4e2d-bd54-687952cac4ec",
		"name": "API Tasks Collections",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "25897630"
	},
	"item": [
		{
			"name": "Get Request",
			"item": [
				{
					"name": "200 OK (Task 6)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code should be 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Status code should have a string\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrlPostman}}/15036f85a35d875ecfdf",
							"host": [
								"{{baseUrlPostman}}"
							],
							"path": [
								"15036f85a35d875ecfdf"
							]
						}
					},
					"response": []
				},
				{
					"name": "Body Responses (Task 7A)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code should be 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Status code should have a string\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"  var jsonData = pm.response.json();\r",
									"console.log(jsonData)\r",
									"console.log(jsonData.name)\r",
									"console.log(jsonData.requests[11].dataMode)\r",
									"console.log(jsonData.requests[9].name)\r",
									"\r",
									"\r",
									"pm.test(\"Confirm that the name should be MyTutorCollection\", function () {\r",
									"    pm.expect(jsonData.name).to.eql(\"MyTutorCollection\");\r",
									"});\r",
									"pm.test(\"Body should contain a name string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"MyTutorCollection\");\r",
									"});\r",
									"pm.test(\"Confirm that data mode should be params\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"params\");\r",
									"});\r",
									"pm.test(\"Request string should have a name\", function () {\r",
									"    pm.expect(jsonData.requests[9].name).to.eql(\"Cottytalk Demo 1\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrlPostman}}/15036f85a35d875ecfdf",
							"host": [
								"{{baseUrlPostman}}"
							],
							"path": [
								"15036f85a35d875ecfdf"
							]
						}
					},
					"response": []
				},
				{
					"name": "Manual Tests (Task 7B)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code should be 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Status code should have a string\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"  var jsonData = pm.response.json();\r",
									"console.log(jsonData)\r",
									"console.log(jsonData.name)\r",
									"console.log(jsonData.requests[11].dataMode)\r",
									"console.log(jsonData.requests[9].name)\r",
									"console.log(jsonData.order[0])\r",
									"\r",
									"\r",
									"pm.test(\"Confirm that the name should be MyTutorCollection\", function () {\r",
									"    pm.expect(jsonData.name).to.eql(\"MyTutorCollection\");\r",
									"});\r",
									"pm.test(\"Body should contain a name string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"MyTutorCollection\");\r",
									"});\r",
									"pm.test(\"Confirm that data mode should be params\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"params\");\r",
									"});\r",
									"pm.test(\"Request string should have a name\", function () {\r",
									"    pm.expect(jsonData.requests[9].name).to.eql(\"Cottytalk Demo 1\");\r",
									"\r",
									"});\r",
									"pm.test(\"Confirm that the order has an ID\", function () {\r",
									"    pm.expect(jsonData.order[0]).to.eql(\"acd9e54c-f8ff-49ce-92c5-bd4ca1d3ca36\");\r",
									"});\r",
									"\r",
									"/**\r",
									" * \r",
									" * pm.test(\"Your test name\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.value).to.eql(100);\r",
									" */"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrlPostman}}/15036f85a35d875ecfdf",
							"host": [
								"{{baseUrlPostman}}"
							],
							"path": [
								"15036f85a35d875ecfdf"
							]
						}
					},
					"response": []
				},
				{
					"name": "Creating Environment (Task 8A/B)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"  var jsonData = pm.response.json();\r",
									"console.log(jsonData.order[0])\r",
									"pm.environment.set(\"TeesID\", jsonData.order[0]);\r",
									"\r",
									"\r",
									"pm.test(\"Status code should be 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Status code should have a string\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"console.log(jsonData)\r",
									"console.log(jsonData.name)\r",
									"console.log(jsonData.requests[11].dataMode)\r",
									"console.log(jsonData.requests[9].name)\r",
									"console.log(jsonData.order[0])\r",
									"\r",
									"\r",
									"pm.test(\"Confirm that the name should be MyTutorCollection\", function () {\r",
									"    pm.expect(jsonData.name).to.eql(\"MyTutorCollection\");\r",
									"});\r",
									"pm.test(\"Body should contain a name string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"MyTutorCollection\");\r",
									"});\r",
									"pm.test(\"Confirm that data mode should be params\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"params\");\r",
									"});\r",
									"pm.test(\"Request string should have a name\", function () {\r",
									"    pm.expect(jsonData.requests[9].name).to.eql(\"Cottytalk Demo 1\");\r",
									"\r",
									"});\r",
									"pm.test(\"Confirm that the order has an ID\", function () {\r",
									"    pm.expect(jsonData.order[0]).to.eql(\"acd9e54c-f8ff-49ce-92c5-bd4ca1d3ca36\");\r",
									"});\r",
									"\r",
									"/**\r",
									" * \r",
									" * pm.test(\"Your test name\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.value).to.eql(100);\r",
									" */"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrlPostman}}/15036f85a35d875ecfdf",
							"host": [
								"{{baseUrlPostman}}"
							],
							"path": [
								"15036f85a35d875ecfdf"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}